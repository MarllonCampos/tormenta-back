import * as yup from 'yup'
import { Request, Response, NextFunction } from 'express';
import {{pascalCase name}}Service from './service'
import {{pascalCase name}}Errors from './errors'
import {{pascalCase name}}DTO from './model'

class {{pascalCase name}}Controller {
  private service: {{pascalCase name}}Service;
  constructor() {
    this.service = new {{pascalCase name}}Service();
  }

  index = async (req: Request, res: Response, next: NextFunction) => {
    const {{camelCase name}} = await this.service.index();
    return res.json({{camelCase name}});
  };
  show = async (req: Request, res: Response, next: NextFunction) => {
    try {
      const {id} = req.params
      const formattedId = Number(id)
      if (isNaN(formattedId)) throw {{pascalCase name}}Errors.IdMustBeAnumber();

      const specificItem = await this.service.show(formattedId)

      if(!specificItem) throw {{pascalCase name}}Errors.{{pascalCase name}}NotFound()
      const {{camelCase name}}DTO = new {{pascalCase name}}DTO(specificItem)
      const normalizedSpecific = {{camelCase name}}DTO.view()
      return res.status(200).send({
        message: 'Specific encontradx com sucessx',
        data: normalizedSpecific 
      })
    } catch(error){
      next(error)
    }
  }
  store = async (req: Request, res: Response, next: NextFunction) => {
    try {

    } catch(error){
       if (error instanceof yup.ValidationError) {
        const yupErrors = error.errors;
        return next({{pascalCase name}}Errors.ValidationErrors([...yupErrors]));
      }
      next(error)
    }
  }
  update = async (req: Request, res: Response, next: NextFunction) => {
    try {

    } catch(error){
      if (error instanceof yup.ValidationError) {
        const yupErrors = error.errors;
        return next({{pascalCase name}}Errors.ValidationErrors([...yupErrors]));
      }
      next(error)
    }
  }
  delete = async (req: Request, res: Response, next: NextFunction) => {
    try {

    } catch(error){
      next(error)
    }
  }
}

export default {{pascalCase name}}Controller;
